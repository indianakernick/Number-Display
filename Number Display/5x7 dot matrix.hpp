//
//  5x7 dot matrix.hpp
//  Number Display
//
//  Created by Indi Kernick on 28/7/17.
//  Copyright Â© 2017 Indi Kernick. All rights reserved.
//

#ifndef five_x_seven_dot_matrix_hpp
#define five_x_seven_dot_matrix_hpp

#include <string>
#include <vector>
#include <cstdint>
#include <experimental/string_view>

namespace Display::Dot5x7 {
  /*
  FONT[0][0] is the top    row of space and
  FONT[0][6] is the bottom row of space
  
  The least significant bit of a row is the left  most pixel and
  the most  significant bit of a row is the right most pixel
  */

  const uint8_t FONT[95][7] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // (space)
    {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04}, // ! 
    {0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00}, // " 
    {0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A}, // # 
    {0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04}, // $ 
    {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13}, // % 
    {0x04, 0x0A, 0x0A, 0x0A, 0x15, 0x12, 0x0D}, // & 
    {0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00}, // ' 
    {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02}, // ( 
    {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08}, // ) 
    {0x04, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x04}, // * 
    {0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00}, // + 
    {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08}, // , 
    {0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00}, // - 
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C}, // . 
    {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10}, // / 
    {0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E}, // 0 
    {0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E}, // 1 
    {0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F}, // 2 
    {0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E}, // 3 
    {0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02}, // 4 
    {0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E}, // 5 
    {0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E}, // 6 
    {0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08}, // 7 
    {0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E}, // 8 
    {0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C}, // 9 
    {0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00}, // : 
    {0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08}, // ; 
    {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02}, // < 
    {0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00}, // = 
    {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08}, // > 
    {0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04}, // ? 
    {0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0F}, // @
    {0x04, 0x0A, 0x11, 0x11, 0x1F, 0x11, 0x11}, // A 
    {0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}, // B 
    {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E}, // C 
    {0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E}, // D 
    {0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x1F}, // E 
    {0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10}, // F 
    {0x0E, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0F}, // G 
    {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}, // H 
    {0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E}, // I 
    {0x1F, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C}, // J 
    {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11}, // K 
    {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F}, // L 
    {0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11}, // M 
    {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11}, // N 
    {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}, // O 
    {0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10}, // P 
    {0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D}, // Q 
    {0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11}, // R 
    {0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E}, // S 
    {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}, // T 
    {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}, // U 
    {0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04}, // V 
    {0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11}, // W 
    {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11}, // X 
    {0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04}, // Y 
    {0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F}, // Z 
    {0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E}, // [ 
    {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01}, /* \ */
    {0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E}, // ] 
    {0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00}, // ^ 
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F}, // _ 
    {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00}, // `
    {0x00, 0x0E, 0x01, 0x0D, 0x13, 0x13, 0x0D}, // a
    {0x10, 0x10, 0x10, 0x1C, 0x12, 0x12, 0x1C}, // b 
    {0x00, 0x00, 0x00, 0x0E, 0x10, 0x10, 0x0E}, // c 
    {0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07}, // d 
    {0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0F}, // e 
    {0x06, 0x09, 0x08, 0x1C, 0x08, 0x08, 0x08}, // f 
    {0x0E, 0x11, 0x13, 0x0D, 0x01, 0x01, 0x0E}, // g 
    {0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11}, // h 
    {0x00, 0x04, 0x00, 0x0C, 0x04, 0x04, 0x0E}, // i 
    {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C}, // j 
    {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12}, // k 
    {0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}, // l 
    {0x00, 0x00, 0x0A, 0x15, 0x15, 0x11, 0x11}, // m 
    {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11}, // n 
    {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E}, // o 
    {0x00, 0x1C, 0x12, 0x12, 0x1C, 0x10, 0x10}, // p 
    {0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01}, // q 
    {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10}, // r 
    {0x00, 0x00, 0x0F, 0x10, 0x0E, 0x01, 0x1E}, // s 
    {0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06}, // t 
    {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D}, // u 
    {0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04}, // v 
    {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A}, // w 
    {0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11}, // x 
    {0x00, 0x11, 0x11, 0x0F, 0x01, 0x11, 0x0E}, // y 
    {0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F}, // z 
    {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06}, // {
    {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04}, // |
    {0x0C, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0C}, // }
    {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00}  // ~
  };
  
  inline bool getPixel(const char c, const size_t x, const size_t y) {
    return (FONT[size_t(32) + c][y] >> x) & 1;
  }
  
  ///Winding is counter clockwise
  struct Mesh {
    std::vector<unsigned> indicies;
    std::vector<float> colors;
    std::vector<float> verts;
  };
  
  struct Color {
    float r = 0.0f;
    float g = 0.0f;
    float b = 0.0f;
    float a = 0.0f;
  };
  
  struct CircleConfig {
    ///Number of triangles per circle
    unsigned circleDetail = 8;
    ///Radius of the circles
    float circleRadius = 1.0f;
    ///Distances between the centers of the circles
    float separation = 3.0f;
    
    ///Width of matrix in circles
    unsigned width = 32 * 5;
    ///Height of matrix in circles
    unsigned height = 4 * 7;
    
    unsigned kerning = 1;
    
    Color onColor = {1.0f, 1.0f, 1.0f, 1.0f};
    Color offColor = {0.05f, 0.05f, 0.05f, 1.0f};
  };
  
  Mesh circles(std::experimental::string_view, CircleConfig);
};

#endif
